pipeline {
    agent { 
        label 'master' 
    }
    
    tools {
        maven 'Maven-3.6.3'
        jdk 'OpenJDK-17'
    }
    
    environment {
        MAVEN_OPTS = '-Xmx256m -Xms128m'
        JOB_NAME = 'IGP-Package-Job'
        DOCKER_IMAGE = 'abctechnologies-web'
        DOCKER_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = "abc-container-${BUILD_NUMBER}"
        WAR_FILE = "ABCtechnologies-1.0.war"
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 15, unit: 'MINUTES')
    }
    
    stages {
        stage('Code Checkout') {
            steps {
                script {
                    echo "📦 Starting packaging of IGP project"
                    echo "🖥️ Running on: ${env.NODE_NAME}"
                    echo "📥 Checking out code..."
                    git 'https://github.com/MosALs/IGP-Grad-Project.git'
                    
                    echo "🔍 Verifying Dockerfile exists..."
                    sh 'ls -la Dockerfile'
                }
            }
        }
        
        stage('Clean Previous Builds') {
            steps {
                script {
                    echo "🧹 Cleaning previous Docker artifacts..."
                    
                    // Stop and remove any existing containers
                    sh '''
                        docker stop $(docker ps -aq --filter "name=abc-container") 2>/dev/null || true
                        docker rm $(docker ps -aq --filter "name=abc-container") 2>/dev/null || true
                    '''
                    
                    // Remove old images to free space
                    sh '''
                        docker images | grep abctechnologies | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true
                    '''
                    
                    echo "✅ Cleanup completed"
                }
            }
        }
        
        stage('Maven Package') {
            steps {
                script {
                    echo "📦 Creating WAR package for ABCtechnologies..."
                    
                    // Create WAR package using Java 17
                    sh 'mvn clean package -DskipTests'
                    
                    echo "✅ Maven packaging completed!"
                    echo "📁 WAR file created:"
                    sh "ls -lh target/${WAR_FILE}"
                    
                    // Verify specific WAR file exists for Docker build
                    sh "test -f target/${WAR_FILE} && echo 'WAR file confirmed: ${WAR_FILE}'"
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    echo "🐳 Building Docker image..."
                    echo "📋 Image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Build Docker image with simplified approach
                    sh """
                        docker build --no-cache -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    """
                    
                    echo "✅ Docker image built successfully!"
                    echo "🐳 Docker images:"
                    sh "docker images | grep ${DOCKER_IMAGE} | head -3"
                }
            }
        }
        
        stage('Deploy Container') {
            steps {
                script {
                    echo "🚀 Deploying application container..."
                    
                    // Deploy new container with error handling
                    sh """
                        docker run -d --name ${CONTAINER_NAME} \
                        -p 8081:8080 \
                        --memory="400m" \
                        --restart unless-stopped \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                    
                    // Wait for container to start
                    echo "⏳ Waiting for container to start..."
                    sleep(time: 30, unit: "SECONDS")
                    
                    // Simple verification
                    def containerCheck = sh(
                        script: "docker ps --filter name=${CONTAINER_NAME} --format '{{.Names}}'",
                        returnStdout: true
                    ).trim()
                    
                    if (containerCheck.contains(CONTAINER_NAME)) {
                        echo "✅ Container deployed successfully!"
                        echo "🌐 Access at: http://YOUR_EC2_IP:8081"
                    } else {
                        echo "❌ Container deployment verification failed"
                        sh "docker logs ${CONTAINER_NAME} || true"
                        error("Container not running properly")
                    }
                }
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                script {
                    echo "📦 Archiving build artifacts..."
                    
                    // Archive WAR file
                    archiveArtifacts artifacts: "target/${WAR_FILE}", allowEmptyArchive: true
                    
                    // Create simple deployment summary
                    writeFile file: 'deployment-summary.txt', text: """
ABCtechnologies Docker Deployment
================================
Build: #${BUILD_NUMBER}
Date: ${new Date()}
Container: ${CONTAINER_NAME}
Access: http://YOUR_EC2_IP:8081
Status: DEPLOYED ✅
"""
                    
                    archiveArtifacts artifacts: 'deployment-summary.txt'
                    echo "✅ Artifacts archived successfully!"
                }
            }
        }
    }
    
    post {
        success {
            script {
                echo """
🎉 ===============================================
   ABCTECHNOLOGIES DOCKER DEPLOYMENT - SUCCESS!
🎉 ===============================================
✅ Container: ${CONTAINER_NAME}
🌐 Access: http://YOUR_EC2_IP:8081
===============================================
"""
            }
        }
        failure {
            script {
                echo "❌ Docker deployment failed!"
                
                // Show debug information
                sh """
                    echo "=== Docker Info ==="
                    docker --version
                    docker info | head -10
                    
                    echo "=== System Resources ==="
                    df -h
                    free -h
                    
                    echo "=== Recent Docker Logs ==="
                    docker logs ${CONTAINER_NAME} 2>/dev/null | tail -20 || echo "No container logs"
                """
                
                // Clean up failed deployment
                sh """
                    docker stop ${CONTAINER_NAME} 2>/dev/null || true
                    docker rm ${CONTAINER_NAME} 2>/dev/null || true
                """
            }
        }
        always {
            script {
                echo "🏁 Pipeline execution completed"
            }
        }
    }
}
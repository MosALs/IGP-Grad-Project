pipeline {
    agent { 
        label 'master' 
    }
    
    tools {
        maven 'Maven-3.6.3'
        jdk 'OpenJDK-17'
    }
    
    environment {
        MAVEN_OPTS = '-Xmx512m -Xms256m'
        JOB_NAME = 'IGP-Package-Job'
        DOCKER_IMAGE = 'abctechnologies-web'
        DOCKER_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = "abc-container-${BUILD_NUMBER}"
        WAR_FILE = "ABCtechnologies-1.0.war"
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 15, unit: 'MINUTES')
    }
    
    stages {
        stage('Code Checkout') {
            steps {
                script {
                    echo "üì¶ Starting enhanced packaging with Docker"
                    echo "üñ•Ô∏è Running on: ${env.NODE_NAME}"
                    echo "üì• Checking out code..."
                    git 'https://github.com/MosALs/IGP-Grad-Project.git'
                    
                    echo "üîç Verifying Dockerfile exists..."
                    sh 'ls -la Dockerfile'
                }
            }
        }
        
        stage('Maven Package') {
            steps {
                script {
                    echo "üì¶ Creating WAR package for ABCtechnologies..."
                    
                    // Create WAR package using Java 8
                    sh 'mvn clean package -DskipTests'
                    
                    echo "‚úÖ Maven packaging completed!"
                    echo "üìÅ WAR file created:"
                    sh "ls -lh target/${WAR_FILE}"
                    
                    // Verify specific WAR file exists for Docker build
                    sh "test -f target/${WAR_FILE} && echo 'WAR file confirmed: ${WAR_FILE}'"
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    echo "üìã Image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Build Docker image
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker build -t ${DOCKER_IMAGE}:latest .
                    """
                    
                    echo "‚úÖ Docker image built successfully!"
                    echo "üê≥ Docker images:"
                    sh "docker images | grep ${DOCKER_IMAGE}"
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                script {
                    echo "üß™ Testing Docker image..."
                    
                    // Test run container (detached mode)
                    sh """
                        docker run -d --name test-container-${BUILD_NUMBER} \
                        -p 8081:8080 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                    
                    // Wait for container to start and Tomcat to initialize
                    echo "‚è≥ Waiting for Tomcat to start..."
                    sleep(time: 30, unit: "SECONDS")
                    
                    // Test if Tomcat is responding
                    script {
                        def containerStatus = sh(
                            script: "docker ps --filter name=test-container-${BUILD_NUMBER} --format '{{.Status}}'",
                            returnStdout: true
                        ).trim()
                        
                        echo "üìä Container Status: ${containerStatus}"
                        
                        // Check if container is still running
                        if (containerStatus.contains("Up")) {
                            echo "‚úÖ Container is running successfully!"
                            
                            // Test HTTP response (optional)
                            def httpTest = sh(
                                script: "curl -f http://localhost:8081/ >/dev/null 2>&1",
                                returnStatus: true
                            )
                            
                            if (httpTest == 0) {
                                echo "‚úÖ HTTP response test passed!"
                            } else {
                                echo "‚ö†Ô∏è HTTP test failed, but container is running"
                            }
                        } else {
                            echo "‚ùå Container status check failed"
                            // Show container logs for debugging
                            sh "docker logs test-container-${BUILD_NUMBER} || true"
                            error("Container failed to start properly")
                        }
                    }
                    
                    // Clean up test container
                    sh """
                        docker stop test-container-${BUILD_NUMBER} || true
                        docker rm test-container-${BUILD_NUMBER} || true
                    """
                }
            }
        }
        
        stage('Deploy Container') {
            steps {
                script {
                    echo "üöÄ Deploying application container..."
                    
                    // Stop and remove any existing container
                    sh """
                        docker stop ${CONTAINER_NAME} || true
                        docker rm ${CONTAINER_NAME} || true
                    """
                    
                    // Deploy new container
                    sh """
                        docker run -d --name ${CONTAINER_NAME} \
                        -p 8080:8080 \
                        --restart unless-stopped \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                    
                    // Wait for deployment and application startup
                    echo "‚è≥ Waiting for ABCtechnologies application to start..."
                    sleep(time: 45, unit: "SECONDS")
                    
                    // Verify deployment
                    def deployStatus = sh(
                        script: "docker ps --filter name=${CONTAINER_NAME} --format '{{.Status}}'",
                        returnStdout: true
                    ).trim()
                    
                    echo "üîç Deployment Status: ${deployStatus}"
                    
                    if (deployStatus.contains("Up")) {
                        echo "‚úÖ ABCtechnologies application deployed successfully!"
                        echo "üåê Access at: http://YOUR_EC2_IP:8080"
                        
                        // Show application logs
                        echo "üìã Application startup logs:"
                        sh "docker logs ${CONTAINER_NAME} --tail 20 || true"
                    } else {
                        echo "‚ùå Deployment verification failed!"
                        sh "docker logs ${CONTAINER_NAME} || true"
                        error("Deployment failed!")
                    }
                }
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                script {
                    echo "üì¶ Archiving build artifacts..."
                    
                    // Archive WAR file
                    archiveArtifacts artifacts: "target/${WAR_FILE}", allowEmptyArchive: true
                    
                    // Archive Dockerfile
                    archiveArtifacts artifacts: 'Dockerfile', allowEmptyArchive: true
                    
                    // Save Docker image as tar file
                    sh "docker save ${DOCKER_IMAGE}:${DOCKER_TAG} -o ${DOCKER_IMAGE}-${DOCKER_TAG}.tar"
                    archiveArtifacts artifacts: "${DOCKER_IMAGE}-${DOCKER_TAG}.tar", allowEmptyArchive: true
                    
                    // Create deployment summary
                    writeFile file: 'deployment-summary.txt', text: """
ABCtechnologies Docker Deployment Summary
=======================================
Build: #${BUILD_NUMBER}
Date: ${new Date()}
Node: ${env.NODE_NAME}

Application Information:
- Name: ABCtechnologies (RetailModule)
- Version: 1.0
- Java Version: 8
- Package Type: WAR

Docker Information:
- Base Image: tomcat:9.0-jre8
- Application Image: ${DOCKER_IMAGE}:${DOCKER_TAG}
- Container: ${CONTAINER_NAME}
- Port: 8080
- WAR File: ${WAR_FILE}

Deployment:
- Status: DEPLOYED ‚úÖ
- Access URL: http://YOUR_EC2_IP:8080
- WAR location: /usr/local/tomcat/webapps/ROOT.war
- Health check: Available at /

Docker Commands:
- View logs: docker logs ${CONTAINER_NAME}
- Stop container: docker stop ${CONTAINER_NAME}
- Remove container: docker rm ${CONTAINER_NAME}
- View image: docker images | grep ${DOCKER_IMAGE}

Next Steps:
1. Access application at http://YOUR_EC2_IP:8080
2. Monitor application: docker logs -f ${CONTAINER_NAME}
3. Scale if needed: docker run additional containers on different ports
"""
                    
                    archiveArtifacts artifacts: 'deployment-summary.txt'
                    echo "‚úÖ All artifacts archived successfully!"
                }
            }
        }
    }
    
    post {
        success {
            script {
                echo """
üéâ ===============================================
   ABCTECHNOLOGIES DOCKER DEPLOYMENT - SUCCESS!
üéâ ===============================================
‚úÖ WAR file created: target/${WAR_FILE}
‚úÖ Docker image built: ${DOCKER_IMAGE}:${DOCKER_TAG}
‚úÖ Container deployed: ${CONTAINER_NAME}
‚úÖ ABCtechnologies application running on port 8080

üåê Access your ABCtechnologies application:
   http://YOUR_EC2_IP:8080

üìä Application Details:
   - Name: ABCtechnologies (RetailModule)
   - Version: 1.0
   - Java: 8
   - Tomcat: 9.0

üê≥ Docker commands:
   docker ps                          # View running containers
   docker logs ${CONTAINER_NAME}       # View application logs
   docker stop ${CONTAINER_NAME}       # Stop container
   docker exec -it ${CONTAINER_NAME} bash  # Access container shell
===============================================
"""
            }
        }
        failure {
            script {
                echo "‚ùå Docker deployment failed!"
                
                // Clean up on failure
                sh """
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                """
            }
        }
        always {
            script {
                // Clean up temporary files
                sh "rm -f ${DOCKER_IMAGE}-${DOCKER_TAG}.tar || true"
                cleanWs()
            }
        }
    }
}